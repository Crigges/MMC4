package SpellNr1

import Fx
import ChannelAbilityPreset
import ClosureEvents
import Main

@compiletime function createSpell()
	var def = new ChannelAbilityPreset('ramD', 10)
	def.setLevels(1)
	def.removeChannelProperties(true)
	def.setHotkeyNormal("D")
	def.presetButtonPosNormal(2, 1)
	def.setTooltipNormal(1, "Conductor [D]")
	def.setTooltipNormalExtended(1, "Fires a Missle, which splits into other missles, if the enemy was hit")
	def.setIconNormal("ReplaceableTextures\\CommandButtons\\BTNFireBolt.blp")
	def.presetTargetTypes(Targettype.PTARGET)
	def.presetFollowThroughTime((int i) -> 0)
	def.setName("Conductor")
	def.setLevelSkipRequirement(0)
	def.setRequiredLevel(0)
	def.setCooldown(1, 2)
	def.setCastRange(1, 10000)
	def.setManaCost(1, 0)
		
init
	onPointCast('ramD', (unit u, int lvl, vec2 pos) -> new Conductor(u, pos))

public class Conductor
	static constant real range = 900
	static constant real missleRadius = 80
	static constant real missleHeight = 80
	static constant real missleSpeed = 30
	static constant real knockbackFactor = 40
	Fx dummy
	vec2 speed
	unit owner
	timer t
	real distance = range
	boolean canHit = true
	
	construct(unit caster, unit source, angle ang)
		owner = caster
		vec2 pos = source.getPos()
		dummy = new Fx(pos.polarOffset(ang, 50 + missleRadius + 10).withZ(missleHeight), ang, "Abilities\\Weapons\\FireBallMissile\\FireBallMissile.mdl")
		speed = vec2(0,0).polarOffset(ang, missleSpeed)
		t = getTimer()
			..setData(this castTo int)
			..startPeriodic(ANIMATION_PERIOD, () -> GetExpiredTimer().getData()	castTo thistype.move())
	
	construct(unit caster, vec2 target)
		owner = caster
		vec2 pos = caster.getPos()
		angle ang = pos.angleTo(target)
		dummy = new Fx(pos.withZ(missleHeight), ang, "Abilities\\Weapons\\FireBallMissile\\FireBallMissile.mdl")
		dummy.setScale(1.8)
		speed = vec2(0,0).polarOffset(ang, missleSpeed)
		t = getTimer()
			..setData(this castTo int)
			..startPeriodic(ANIMATION_PERIOD, () -> GetExpiredTimer().getData()	castTo thistype.move())
		
	function move()
		dummy.setXY(dummy.getPos2() + speed)
		ENUM_GROUP.enumUnitsInRange(dummy.getPos2(), missleRadius)
		for unit u in ENUM_GROUP
			if u.getOwner().isEnemyOf(owner.getOwner())
				units.get(u).addKnock(vec2(0,0).polarOffset(dummy.getPos2().angleTo(u.getPos()), knockbackFactor))
				if canHit
					createNewMissle(u)
				destroy this
				return
		distance -= missleSpeed
		if distance <= 0
			destroy this
	
	function setNewMissleFalse()
		canHit = false
			
	function createNewMissle(unit u)
			angle alpha = dummy.getPos2().angleTo(u.getPos())
			for int i = 1 to 6
				new Conductor(owner, u, alpha + (i * 60.).asAngleDegrees()).setNewMissleFalse()
	ondestroy
		destroy dummy
		t.release()

		
