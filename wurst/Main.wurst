package Main

	import Basics
	import LinkedListModule
	import HashMap
	import Terrain
	import Helper
	import ClosureTimers
	
	public HashMap<unit, Unit> heros = new HashMap<unit, Unit>()
	public force allPlayer = CreateForce()
	public trigger death = CreateTrigger()..addAction(function handleDeath)
	int lives = 20
	leaderboard lb
	
	function handleDeath()
		Unit h = heros.get(GetTriggerUnit())
		if h != null
			ReviveHero(h.u, h.startPos.x, h.startPos.y, true)
			LeaderboardSetPlayerItemValueBJ(h.u.getOwner(), lb, lives)
			LeaderboardSortItemsBJ(lb, bj_SORTTYPE_SORTBYVALUE, false )
		else
			DisplayTextToForce( GetPlayersAll(), GetPlayerName(h.u.getOwner()) + " has Lost" )
			
		
	
	public class Unit
		use LinkedListModule
		Unit lastCollision
		unit u
		vec2 startPos
		vec2 knock = vec2(0, 0)
		
		construct(unit u)
			this.u = u
			heros.put(u, this)
			startPos = u.getPos()
			
		function addKnock(vec2 impuls)
			knock += impuls
			
		function resetKnock()
			knock = vec2(0, 0)
			
		function collision(Unit otherUnit)
			lastCollision = otherUnit
			otherUnit.lastCollision = this
			var pos1 = u.getPos()
			var pos2 = otherUnit.u.getPos()
			var vel1 = knock
			var vel2 = otherUnit.knock
			let delta = (pos2 - pos1)
			let deltaLen = delta.length()
			vec2 deltaNorm
			if deltaLen == 0
				deltaNorm = vec2(0,1)
			else
				deltaNorm = delta * (1/deltaLen)
			real speed1central = vel1.dot(deltaNorm)
			real speed2central = vel2.dot(deltaNorm)
			let futurePos1 = pos1 + vel1*0.01
			let futurePos2 = pos2 + vel2*0.01
			let futureDelta = (futurePos2 - futurePos1)
			if futureDelta.length() < deltaLen
				let vel1central = deltaNorm*speed1central
				let vel2central = deltaNorm*speed2central
				vel1 += (vel2central - vel1central) * 1
				vel2 += (vel1central - vel2central) * 1
				knock = vel1
				otherUnit.knock = vel2
			
		static function knockback()
			Unit curr = first
			while curr != null
				vec2 next = curr.u.getPos() + curr.knock
				if isTerrainWalkable(next.x, next.y)
					curr.u.setXY(next)
				else
					curr.lastCollision = null
					curr.knock = getBounceVec(curr.knock, getPathingNormal(next))
					next = curr.u.getPos() + (curr.knock * 2)
					curr.u.setXY(next)
				group g = CreateGroup()
				GroupEnumUnitsInRange(g, next.x, next.y, 100, null)
				unit u = FirstOfGroup(g)
				if u != null and curr.lastCollision != heros.get(u)
					curr.collision(heros.get(u))
				curr.knock = curr.knock * 0.95
				curr = curr.next
				DestroyGroup(g)

	init
		print("asdf")
		death.registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
		FogEnableOff()
		FogMaskEnableOff()
		print("jklö")
		getTimer().startPeriodic(0.03, function  Unit.knockback)
		int amount = 0
		for int i = 0 to 11
			if GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING
				amount++
		for int i = 0 to 11
			if GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING
				vec2 pos = gg_rct_Gebiet_000.getCenter().polarOffset(((360/amount) * i).asAngleDegrees(), 1100)
				new Unit(CreateUnit(Player(i), 'h000', pos.x, pos.y, ((360/amount) * i) + 180))
				print("created")
		getTimer().start(0.0, function lb)
		doPeriodically(0.03, (CallbackPeriodic b) -> SetCameraField(CAMERA_FIELD_TARGET_DISTANCE, 2500, 0))
				
	function lb()
		lb = CreateLeaderboard()
		LeaderboardSetLabel(lb, "Lives")
		PlayerSetLeaderboard(Player(0), lb)
		LeaderboardAddItem(lb, GetPlayerName(Player(0)), lives, Player(0))
		LeaderboardDisplay(lb, true)
		LeaderboardResizeBJ(lb)

endpackage